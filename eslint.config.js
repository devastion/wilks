import eslintPluginJs from "@eslint/js";
import eslintPluginStylistic from "@stylistic/eslint-plugin";
import eslintPluginTs from "@typescript-eslint/eslint-plugin";
import eslintParserTs from "@typescript-eslint/parser";
import eslintPluginFunctional from "eslint-plugin-functional";
import eslintPluginImport from "eslint-plugin-import";
import eslintPluginJsonc from "eslint-plugin-jsonc";
import eslintPluginSonarjs from "eslint-plugin-sonarjs";
import globals from "globals";
import eslintParserJsonc from "jsonc-eslint-parser";

const stylisticRules = {
  "@stylistic/array-bracket-newline": [
    "error",
    {
      multiline: true,
      minItems: 3,
    },
  ],
  "@stylistic/array-bracket-spacing": [
    "error",
    "always",
    {
      singleValue: true,
      objectsInArrays: true,
      arraysInArrays: true,
    },
  ],
  "@stylistic/array-element-newline": [
    "error",
    {
      multiline: true,
      minItems: 3,
    },
  ],
  "@stylistic/arrow-parens": [ "error", "always" ],
  "@stylistic/arrow-spacing": [
    "error",
    {
      before: true,
      after: true,
    },
  ],
  "@stylistic/block-spacing": [ "error", "always" ],
  "@stylistic/brace-style": [ "error", "1tbs" ],
  "@stylistic/comma-dangle": [ "error", "always-multiline" ],
  "@stylistic/comma-spacing": [
    "error",
    {
      before: false,
      after: true,
    },
  ],
  "@stylistic/comma-style": [ "error", "last" ],
  "@stylistic/computed-property-spacing": [ "error", "never" ],
  "@stylistic/dot-location": [ "error", "property" ],
  "@stylistic/eol-last": [ "error", "always" ],
  "@stylistic/function-call-argument-newline": [ "error", "consistent" ],
  "@stylistic/function-call-spacing": [ "error", "never" ],
  "@stylistic/function-paren-newline": [ "error", { minItems: 3 } ],
  "@stylistic/generator-star-spacing": [
    "error",
    {
      before: true,
      after: false,
    },
  ],
  "@stylistic/implicit-arrow-linebreak": [ "error", "beside" ],
  "@stylistic/indent": [ "error", 2 ],
  "@stylistic/key-spacing": [
    "error",
    {
      beforeColon: false,
      afterColon: true,
      mode: "strict",
    },
  ],
  "@stylistic/keyword-spacing": [
    "error",
    {
      before: true,
      after: true,
    },
  ],
  "@stylistic/linebreak-style": [ "error", "unix" ],
  "@stylistic/lines-around-comment": [
    "error",
    {
      beforeBlockComment: true,
      allowBlockStart: true,
    },
  ],
  "@stylistic/lines-between-class-members": [ "error", "always" ],
  "@stylistic/multiline-ternary": [ "error", "always" ],
  "@stylistic/new-parens": [ "error", "always" ],
  "@stylistic/newline-per-chained-call": [ "error", { ignoreChainWithDepth: 2 } ],
  "@stylistic/no-confusing-arrow": "off",
  "@stylistic/no-extra-parens": [ "error", "functions" ],
  "@stylistic/no-extra-semi": [ "error" ],
  "@stylistic/no-floating-decimal": [ "error" ],
  "@stylistic/no-multi-spaces": [ "error" ],
  "@stylistic/no-multiple-empty-lines": [
    "error",
    {
      max: 1,
      maxEOF: 1,
      maxBOF: 0,
    },
  ],
  "@stylistic/no-trailing-spaces": [ "error", { ignoreComments: false } ],
  "@stylistic/no-whitespace-before-property": "error",
  "@stylistic/nonblock-statement-body-position": [ "error", "beside" ],
  "@stylistic/object-curly-newline": [
    "error",
    {
      multiline: true,
      minProperties: 3,
    },
  ],
  "@stylistic/object-curly-spacing": [
    "error",
    "always",
    {
      arraysInObjects: true,
      objectsInObjects: true,
    },
  ],
  "@stylistic/object-property-newline": [ "error" ],
  "@stylistic/one-var-declaration-per-line": [ "error", "initializations" ],
  "@stylistic/operator-linebreak": [
    "error",
    "after",
    {
      overrides: {
        "?": "before",
        ":": "before",
      },
    },
  ],
  "@stylistic/padded-blocks": [
    "error",
    "never",
    { allowSingleLineBlocks: true },
  ],
  "@stylistic/padding-line-between-statements": [
    "error",
    {
      blankLine: "always",
      prev: "*",
      next: "*",
    },
    {
      blankLine: "any",
      prev: [
        "import",
        "export",
        "const",
        "let",
        "var",
      ],
      next: [
        "import",
        "export",
        "const",
        "let",
        "var",
      ],
    },
    {
      blankLine: "always",
      prev: [ "import" ],
      next: [ "export" ],
    },
  ],
  "@stylistic/quote-props": [ "error", "as-needed" ],
  "@stylistic/quotes": [ "error", "double" ],
  "@stylistic/rest-spread-spacing": [ "error", "never" ],
  "@stylistic/semi": [ "error", "always" ],
  "@stylistic/semi-spacing": [
    "error",
    {
      before: false,
      after: true,
    },
  ],
  "@stylistic/semi-style": [ "error", "last" ],
  "@stylistic/space-before-blocks": [ "error", "always" ],
  "@stylistic/space-before-function-paren": [ "error", "never" ],
  "@stylistic/space-in-parens": [ "error", "never" ],
  "@stylistic/space-infix-ops": [ "error", { int32Hint: false } ],
  "@stylistic/space-unary-ops": [ "error" ],
  "@stylistic/spaced-comment": [ "error", "always" ],
  "@stylistic/switch-colon-spacing": [
    "error",
    {
      after: true,
      before: false,
    },
  ],
  "@stylistic/template-curly-spacing": [ "error", "never" ],
  "@stylistic/template-tag-spacing": [ "error", "never" ],
  "@stylistic/wrap-iife": [ "error", "outside" ],
  "@stylistic/wrap-regex": "error",
  "@stylistic/yield-star-spacing": [
    "error",
    {
      before: false,
      after: true,
    },
  ],
  "@stylistic/member-delimiter-style": "error",
  "@stylistic/type-annotation-spacing": [ "error" ],
  "@stylistic/indent-binary-ops": [ "error", 2 ],
  "@stylistic/type-generic-spacing": [ "error" ],
  "@stylistic/type-named-tuple-spacing": [ "error" ],
  "@stylistic/max-statements-per-line": [ "error", { max: 1 } ],
  "@stylistic/max-len": "off",
};

/** @type { import("eslint").Linter.FlatConfig[] } */
const eslintConfig = [
  {
    ignores: [
      "**/node_modules",
      "**/dist",
      "**/package-lock.json",
      "**/yarn.lock",
      "**/pnpm-lock.yaml",
      "**/bun.lockb",

      "**/output",
      "**/coverage",
      "**/temp",
      "**/.temp",
      "**/tmp",
      "**/.tmp",
      "**/.history",
      "**/.vitepress/cache",
      "**/.nuxt",
      "**/.next",
      "**/.vercel",
      "**/.changeset",
      "**/.idea",
      "**/.cache",
      "**/.output",
      "**/.vite-inspect",
      "**/.yarn",

      "**/CHANGELOG*.md",
      "**/*.min.*",
      "**/LICENSE*",
      "**/__snapshots__",
      "**/auto-import?(s).d.ts",
      "**/components.d.ts",
      "**/vendors",
    ],
  },
  {
    plugins: {
      "@stylistic": eslintPluginStylistic,
      "@typescript-eslint": eslintPluginTs,
      import: eslintPluginImport,
      jsonc: eslintPluginJsonc,
      sonarjs: eslintPluginSonarjs,
      functional: eslintPluginFunctional,
    },
    rules: {
      ...eslintPluginJs.configs.recommended.rules,
      ...eslintPluginSonarjs.configs.recommended.rules,
    },
  },
  {
    languageOptions: {
      globals: {
        ...globals.node,
        ...globals.es2021,
      },
      ecmaVersion: 2022,
      parserOptions: {
        ecmaVersion: 2022,
        sourceType: "module",
        ecmaFeatures: { impliedStrict: true },
      },
      sourceType: "module",
    },
  },
  { rules: { ...stylisticRules } },
  {
    files: [ "**/*.?([cm])ts" ],
    languageOptions: {
      parser: eslintParserTs,
      parserOptions: {
        project: [ "./tsconfig.eslint.json" ],
        tsconfigRootDir: process.cwd(),
        warnOnUnsupportedTypeScriptVersion: true,
      },
    },
    rules: {
      ...eslintPluginTs.configs["eslint-recommended"].overrides[0].rules,
      ...eslintPluginTs.configs["recommended"].rules,
      ...eslintPluginTs.configs["stylistic"].rules,
    },
  },
  {
    settings: {
      "import/extensions": [
        ".js",
        ".jsx",
        ".ts",
        ".cts",
        ".mts",
        ".tsx",
      ],
      "import/parsers": {
        "@typescript-eslint/parser": [
          ".ts",
          ".cts",
          ".mts",
        ],
        espree: [
          ".js",
          ".cjs",
          ".mjs",
          ".jsx",
        ],
      },
      "import/resolver": {
        node: {
          extensions: [
            ".js",
            ".jsx",
            ".ts",
            ".cts",
            ".mts",
            ".tsx",
          ],
        },

        typescript: {
          alwaysTryTypes: true,
          project: [ "./tsconfig.eslint.json" ],
        },

      },
      "import/external-module-folders": [ "node_modules", "node_modules/@types" ],
    },
    rules: {
      "import/order": [
        "error",
        {
          "newlines-between": "always",
          groups: [
            [ "builtin" ],
            [ "external" ],
            [ "internal" ],
            [
              "type",
              "parent",
              "sibling",
              "index",
              "unknown",
            ],
          ],
          pathGroups: [
            {
              pattern: "@*/**",
              patternOptions: {},
              group: "external",
              position: "after",
            },
          ],
          pathGroupsExcludedImportTypes: [ "builtin", "external" ],
          distinctGroup: true,
          alphabetize: {
            order: "asc",
            caseInsensitive: true,
            orderImportKind: "asc",
          },
        },
      ],
      "import/consistent-type-specifier-style": [ "error", "prefer-top-level" ],
      "import/no-duplicates": "error",
      "import/no-cycle": "error",
      "import/no-unresolved": "error",
      "import/named": "error",
      "import/export": "error",

      ...eslintPluginFunctional.configs.recommended.rules,
    },
  },
  {
    files: [
      "**/*.json",
      "**/*.json5",
      "**/*.jsonc",
    ],
    languageOptions: { parser: eslintParserJsonc },
    rules: {
      "jsonc/array-bracket-newline": [
        "error",
        {
          multiline: true,
          minItems: 3,
        },
      ],
      "jsonc/array-bracket-spacing": [ "error", "always" ],
      "jsonc/array-element-newline": [ "error", "always" ],
      "jsonc/comma-dangle": [ "error", "never" ],
      "jsonc/comma-style": [ "error", "last" ],
      "jsonc/indent": [ "error", 2 ],
      "jsonc/key-spacing": [
        "error",
        {
          beforeColon: false,
          afterColon: true,
          mode: "strict",
        },
      ],
      "jsonc/no-dupe-keys": [ "error" ],
      "jsonc/no-floating-decimal": "error",
      "no-irregular-whitespace": "off",
      "jsonc/no-irregular-whitespace": [
        "error",
        {
          skipStrings: true,
          skipComments: false,
          skipRegExps: false,
          skipTemplates: false,
        },
      ],
      "jsonc/no-multi-str": "error",
      "jsonc/no-octal-escape": "error",
      "jsonc/no-octal": "error",
      "jsonc/no-sparse-arrays": "error",
      "jsonc/no-useless-escape": "error",
      "jsonc/object-curly-newline": [ "error", "always" ],
      "jsonc/object-curly-spacing": [
        "error",
        "always",
        {
          arraysInObjects: true,
          objectsInObjects: true,
        },
      ],
      "jsonc/object-property-newline": [ "error" ],
      "jsonc/quote-props": "error",
      "jsonc/quotes": "error",
      "jsonc/space-unary-ops": "error",
      strict: "off",
      "no-unused-expressions": "off",
      "no-unused-vars": "off",
      "jsonc/no-bigint-literals": "error",
      "jsonc/no-binary-expression": "error",
      "jsonc/no-binary-numeric-literals": "error",
      "jsonc/no-escape-sequence-in-identifier": "error",
      "jsonc/no-hexadecimal-numeric-literals": "error",
      "jsonc/no-infinity": "error",
      "jsonc/no-nan": "error",
      "jsonc/no-number-props": "error",
      "jsonc/no-numeric-separators": "error",
      "jsonc/no-octal-numeric-literals": "error",
      "jsonc/no-parenthesized": "error",
      "jsonc/no-plus-sign": "error",
      "jsonc/no-regexp-literals": "error",
      "jsonc/no-template-literals": "error",
      "jsonc/no-undefined-value": "error",
      "jsonc/no-unicode-codepoint-escapes": "error",
      "jsonc/valid-json-number": "error",
      "jsonc/vue-custom-block/no-parsing-error": "error",
    },
  },
  {
    files: [ "**/package.json" ],
    rules: {
      "jsonc/array-bracket-newline": [ "error", "always" ],
      "jsonc/sort-array-values": [
        "error",
        {
          order: { type: "asc" },
          pathPattern: "^files$",
        },
      ],
      "jsonc/sort-keys": [
        "error",
        {
          order: [
            "name",
            "displayName",
            "version",
            "private",
            "description",
            "categories",
            "keywords",
            "homepage",
            "bugs",
            "repository",
            "funding",
            "license",
            "qna",
            "author",
            "maintainers",
            "contributors",
            "publisher",
            "sideEffects",
            "type",
            "imports",
            "exports",
            "main",
            "svelte",
            "umd:main",
            "jsdelivr",
            "unpkg",
            "module",
            "source",
            "jsnext:main",
            "browser",
            "react-native",
            "types",
            "typesVersions",
            "typings",
            "style",
            "example",
            "examplestyle",
            "assets",
            "bin",
            "man",
            "directories",
            "files",
            "workspaces",
            "binary",
            "scripts",
            "betterScripts",
            "contributes",
            "activationEvent",
            "husky",
            "simple-git-hooks",
            "pre-commit",
            "commitlint",
            "lint-staged",
            "nano-staged",
            "config",
            "nodemonConfig",
            "browserify",
            "babel",
            "browserslist",
            "xo",
            "prettier",
            "eslintConfig",
            "eslintIgnore",
            "npmpackagejsonlint",
            "release",
            "remarkConfig",
            "stylelint",
            "ava",
            "jest",
            "mocha",
            "nyc",
            "tap",
            "oclif",
            "resolutions",
            "dependencies",
            "devDependencies",
            "dependenciesMeta",
            "peerDependencies",
            "peerDependenciesMeta",
            "optionalDependencies",
            "bundledDependencies",
            "bundleDependencies",
            "extensionPack",
            "extensionDependencies",
            "flat",
            "packageManager",
            "engines",
            "engineStrict",
            "volta",
            "languageName",
            "os",
            "cpu",
            "preferGlobal",
            "publishConfig",
            "icon",
            "badges",
            "galleryBanner",
            "preview",
            "markdown",
            "pnpm",
          ],
          pathPattern: "^$",
        },
        {
          order: { type: "asc" },
          pathPattern: "^(?:dev|peer|optional|bundled)?[Dd]ependencies(Meta)?$",
        },
        {
          order: { type: "asc" },
          pathPattern: "^(?:resolutions|overrides|pnpm.overrides)$",
        },
        {
          order: { type: "asc" },
          pathPattern: "^scripts.*$",
        },
        {
          order: [
            "types",
            "import",
            "require",
            "default",
          ],
          pathPattern: "^exports.*$",
        },
        {
          order: [
            "pre-applypatch",
            "applypatch-msg",
            "post-applypatch",
            "pre-commit",
            "pre-merge-commit",
            "prepare-commit-msg",
            "commit-msg",
            "post-commit",
            "pre-rebase",
            "post-checkout",
            "post-merge",
            "pre-push",
            "pre-receive",
            "update",
            "post-receive",
            "post-update",
            "push-to-checkout",
            "pre-auto-gc",
            "post-rewrite",
            "sendemail-validate",
            "fsmonitor-watchman",
            "p4-pre-submit",
            "post-index-chang",
          ],
          pathPattern: "^(?:gitHooks|husky|simple-git-hooks)$",
        },
        {
          order: [ "url", "email" ],
          pathPattern: "bugs",
        },
        {
          order: [ "type", "url" ],
          pathPattern: "(repository|funding|license)",
        },
        {
          order: [
            "name",
            "email",
            "url",
          ],
          pathPattern: "author",
        },
      ],
    },
  },
  {
    files: [ "**/tsconfig?(.*).json" ],
    rules: {
      "jsonc/sort-keys": [
        "error",
        {
          order: [
            "extends",
            "compilerOptions",
            "references",
            "files",
            "include",
            "exclude",
          ],
          pathPattern: "^$",
        },
        {
          order: [

            /* Projects */
            "incremental",
            "composite",
            "tsBuildInfoFile",
            "disableSourceOfProjectReferenceRedirect",
            "disableSolutionSearching",
            "disableReferencedProjectLoad",

            /* Language and Environment */
            "target",
            "jsx",
            "jsxFactory",
            "jsxFragmentFactory",
            "jsxImportSource",
            "lib",
            "moduleDetection",
            "noLib",
            "reactNamespace",
            "useDefineForClassFields",
            "emitDecoratorMetadata",
            "experimentalDecorators",

            /* Modules */
            "baseUrl",
            "rootDir",
            "rootDirs",
            "customConditions",
            "module",
            "moduleResolution",
            "moduleSuffixes",
            "noResolve",
            "paths",
            "resolveJsonModule",
            "resolvePackageJsonExports",
            "resolvePackageJsonImports",
            "typeRoots",
            "types",
            "allowArbitraryExtensions",
            "allowImportingTsExtensions",
            "allowUmdGlobalAccess",

            /* JavaScript Support */
            "allowJs",
            "checkJs",
            "maxNodeModuleJsDepth",

            /* Type Checking */
            "strict",
            "strictBindCallApply",
            "strictFunctionTypes",
            "strictNullChecks",
            "strictPropertyInitialization",
            "allowUnreachableCode",
            "allowUnusedLabels",
            "alwaysStrict",
            "exactOptionalPropertyTypes",
            "noFallthroughCasesInSwitch",
            "noImplicitAny",
            "noImplicitOverride",
            "noImplicitReturns",
            "noImplicitThis",
            "noPropertyAccessFromIndexSignature",
            "noUncheckedIndexedAccess",
            "noUnusedLocals",
            "noUnusedParameters",
            "useUnknownInCatchVariables",

            /* Emit */
            "declaration",
            "declarationDir",
            "declarationMap",
            "downlevelIteration",
            "emitBOM",
            "emitDeclarationOnly",
            "importHelpers",
            "importsNotUsedAsValues",
            "inlineSourceMap",
            "inlineSources",
            "mapRoot",
            "newLine",
            "noEmit",
            "noEmitHelpers",
            "noEmitOnError",
            "outDir",
            "outFile",
            "preserveConstEnums",
            "preserveValueImports",
            "removeComments",
            "sourceMap",
            "sourceRoot",
            "stripInternal",

            /* Interop Constraints */
            "allowSyntheticDefaultImports",
            "esModuleInterop",
            "forceConsistentCasingInFileNames",
            "isolatedModules",
            "preserveSymlinks",
            "verbatimModuleSyntax",

            /* Completeness */
            "skipDefaultLibCheck",
            "skipLibCheck",
          ],
          pathPattern: "^compilerOptions$",
        },
      ],
    },
  },
];

export default eslintConfig;
